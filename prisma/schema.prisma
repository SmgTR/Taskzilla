datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Workspace {
  id              String            @id @default(cuid())
  owner           String
  name            String
  description     String?
  image           String?
  projectId       String[]
  type            String            @default("private")
  user            User              @relation(fields: [owner], references: [id], onDelete: Cascade)
  workspaceMember WorkspaceMember[]
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(3)
  projects        Project[]
}

model WorkspaceMember {
  role        String
  memberId    String
  workspaceId String
  user        User      @relation(fields: [memberId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([memberId, workspaceId])
}

model Project {
  id            String          @id @default(cuid())
  owner         String
  name          String
  type          String          @default("public")
  description   String?
  image         String?
  workspaceId   String
  user          User            @relation(fields: [owner], references: [id], onDelete: Cascade)
  projectMember ProjectMember[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  Column        Column[]
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  id           String         @id @default(cuid())
  role         String
  memberId     String
  projectId    String
  tasks        Task[]
  user         User           @relation(fields: [memberId], references: [id])
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Comment      Comment[]
  CommentReply CommentReply[]
}

model Column {
  id        String  @id @default(cuid())
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  Task      Task[]
}

model Task {
  id            String          @id @default(cuid())
  name          String
  assignedTo    ProjectMember[]
  dueDate       DateTime?
  availableTime Int?
  description   String?
  columnId      String
  column        Column          @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  Attachments   Attachments[]
  Tags          Tags[]
  Comment       Comment[]
}

model Comment {
  id             String         @id @default(cuid())
  authorId       String
  commentContent String
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id])
  author         ProjectMember  @relation(fields: [authorId], references: [id])
  CommentReply   CommentReply[]
}

model CommentReply {
  id             String        @id @default(cuid())
  authorId       String
  commentContent String
  commentId      String
  comment        Comment       @relation(fields: [commentId], references: [id])
  author         ProjectMember @relation(fields: [authorId], references: [id])
}

model Attachments {
  id          String @id @default(cuid())
  link        String
  image       String
  title       String
  description String
  taskId      String
  task        Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Tags {
  id     String @id @default(cuid())
  color  String
  name   String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  workspace       Workspace[]
  WorkspaceMember WorkspaceMember[]
  Project         Project[]
  ProjectMember   ProjectMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
