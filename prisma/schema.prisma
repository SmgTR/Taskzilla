datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Workspace {
  id              String            @id @default(cuid())
  owner           String
  name            String
  description     String?
  image           String?
  projectId       String[]
  type            String            @default("private")
  user            User              @relation(fields: [owner], references: [id], onDelete: Cascade)
  workspaceMember WorkspaceMember[]
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(3)
  projects        Project[]
}

model WorkspaceMember {
  role        String
  memberId    String
  workspaceId String
  user        User      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([memberId, workspaceId])
}

model Project {
  id            String          @id @default(cuid())
  owner         String
  name          String
  type          String          @default("public")
  description   String?
  image         String?
  workspaceId   String
  user          User            @relation(fields: [owner], references: [id], onDelete: Cascade)
  projectMember ProjectMember[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  Column        Column[]
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Tag           Tag[]
  Invitation    Invitation[]
}

model ProjectMember {
  id           String         @id @default(cuid())
  roleId       Int
  memberId     String
  projectId    String
  tasks        Task[]
  toDoList     ToDoItem[]
  user         User           @relation(fields: [memberId], references: [id])
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Comment      Comment[]
  CommentReply CommentReply[]
  role         ProjectRole    @relation(fields: [roleId], references: [id])
}

model Column {
  id        String  @id @default(cuid())
  name      String
  projectId String
  order     Int?
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Task      Task[]
}

model Task {
  id            String          @id @default(cuid())
  name          String
  assignedTo    ProjectMember[]
  dueDate       DateTime?
  availableTime Int?
  description   String?
  columnId      String
  order         Int?
  column        Column          @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  Attachment    Attachment[]
  Tag           Tag[]
  Comment       Comment[]
  ToDoList      ToDoList[]
}

model Comment {
  id             String         @id @default(cuid())
  authorId       String
  commentContent String
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id])
  author         ProjectMember  @relation(fields: [authorId], references: [id])
  CommentReply   CommentReply[]
}

model CommentReply {
  id             String        @id @default(cuid())
  authorId       String
  commentContent String
  commentId      String
  comment        Comment       @relation(fields: [commentId], references: [id])
  author         ProjectMember @relation(fields: [authorId], references: [id])
}

model Attachment {
  id          String @id @default(cuid())
  link        String
  image       String
  title       String
  description String
  taskId      String
  task        Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model ToDoList {
  id     String     @id @default(cuid())
  title  String
  taskId String
  items  ToDoItem[]
  task   Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model ToDoItem {
  id   String  @id @default(cuid())
  done Boolean @default(false)

  assignedTo ProjectMember[]
  dueDate    DateTime?
  toDoListId String
  toDoList   ToDoList        @relation(fields: [toDoListId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String  @id @default(cuid())
  color     String
  name      String?
  taskId    String?
  projectId String
  task      Task?   @relation(fields: [taskId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TagTemplate {
  id    String @id @default(cuid())
  color String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ProjectRole {
  id            Int             @id @default(autoincrement())
  name          String
  update        Boolean
  ProjectMember ProjectMember[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  lastName        String?
  email           String?           @unique
  emailVerified   Boolean?
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  workspace       Workspace[]
  WorkspaceMember WorkspaceMember[]
  Project         Project[]
  ProjectMember   ProjectMember[]
  Invitation      Invitation[]
  Notification    Notification[]
}

model Invitation {
  id             String         @id @default(cuid())
  receiverEmail  String
  invitationHost String
  active         Boolean        @default(true)
  projectId      String
  project        Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [invitationHost], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now()) @db.Timestamptz(3)
  Notification   Notification[]
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  userInvite String?
  read       Boolean          @default(false)
  type       NotificationType
  invitation Invitation?      @relation(fields: [userInvite], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now()) @db.Timestamptz(3)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum NotificationType {
  INVITATION
  ASSIGN
}
